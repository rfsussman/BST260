# 23
x <- c("1", "3", "5")
as.integer(x)
# 24
pop = murders$population
pop = sort(pop)
pop
pop[1]
# 24
pop = murders$population
sort(pop)[1]
# 25
order(pop)
# 25
pop[order(pop) == 1]
order(pop) == 1
# 25
pop[order(pop) == 1]
# 25
order(pop) == 1
# 25
which(order(pop) == 1)
murders$population[29]
# 25
which.max(order(pop))
order(pop)
# 25
which.max(order(pop))
# 25
pop[which.max(order(pop))]
order(pop)
sort(pop)
order(pop)
# 25
which(order(pop) == 1)
pop[29]
pop
# 24
pop = murders$population
sort(pop)[1]
order(pop) == 1
sort(pop)
pop[order(pop) == 1]
pop[order(pop)]
# 25
pop[order(pop)][1]
# 26
pop[which.min(pop)]
# 27
states = murders$state
states[which.min(pop)]
# 28
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro",
"San Juan", "Toronto")
city_temps <- data.frame(name = city, temperature = temp)
rank(pop)
# 28
ranks = states[rank(pop)]
ranks
max(pop)
states[which.max(pop)]
rank(pop)
# 28
ranks = states[rank(pop)]
ranks
pop[rank(pop)]
?rank
rank(pop)
pop[rank(pop)]
pop[36]
pop[length(pop)]
rank(state)
rank(states)
rank(pop)
pop[rank(pop),]
idx = rank(pop)
pop[idx]
idx
pop[29]
order(pop, idx)
c(5, 2,3, 6,1 )
v = c(5, 2,3, 6,1 )
rank(v)
v[rank(v)]
v[sort(rank(v))]
v[order(rank(v))]
order(rank(pop))
pop[order(rank(pop))]
# 28
ranks = states[order(rank(pop))]
ranks
my_df = data.frame(states, ranks)
my_df
rank(pop)
my_df = data.frame(ranks, rank(pop))
my_df
# 28
ranks = states[order(rank(pop))]
ranks
order(rank(pop))
sort(Rank(pop))
sort(rank(pop))
my_df = data.frame(states, rank(pop))
my_df
sort(my_df$rank.pop.)
sort(my_df[my_df$rank.pop.])
view(my_df)
View(my_df)
order(rank(pop))
# 29
ind = sort(my_df$rank.pop., ascending = FALSE)
seq(1:50, by = -1)
seq(1,50, by = -1)
?seq
1:-1:5
5:-1:1
my_df$rank.pop.
# 29
ind = 51:-1:1
ind
my_df[ind, ]
my_df$rank.pop.
?sort
sort(my_df$rank.pop., descending = TRUE)
my_df
sort(my_df$rank.pop., ascending = TRUE)
sort(my_df$rank.pop., decreasing = TRUE)
?order
# 29
ind = order(my_df$rank.pop., decreasing = TRUE)
ind
my_df[ind, ]
# 30
str(na_example)
# 30
ind = is.na(na_example)
ind
na_example(ind)
sum(ind)
# 31
mean(na_example[!is.na(na_example)])
city_temps$f = (5/9)*(city_temps$temperature - 32)
city_temps
# 32
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro",
"San Juan", "Toronto")
city_temps <- data.frame(name = city, temperature = temp)
city_temps$c = (5/9)*(city_temps$temperature - 32)
city_temps
# 33
1/c(1, 2, 3)
# 33
1/seq(1, 100)
# 33
sum((1/seq(1, 100))^2)
pi^2
pi^2/6
str(murders)
# 34
murders$murder_rate = (murders$total / murders$population)*100000
murders$murder_rate
mean(murders$murder_rate)
# 35
low = murder_rate < 1
# 35
low = murders$murder_rate < 1
low
# 36
which(murders$murder_rate[low])
low
which(lo)
which(low)
# 37
murders$state[low]
View(murder)
View(murders)
# 38
murders$state[murders$region == "Northeast" & low]
# 39
sum(murders$murder_rate < mean(murders$murder_rate))
# 40
ind = match(c("AK", "MI", "IA"), murders$abb)
ind
murders$state[ind]
# 41
which(c("MA", "ME", "MI", "MO", "MU") %in% murders$abb)
# 42
which(c("MA", "ME", "MI", "MO", "MU") %!in% murders$abb)
# 42
which(!(c("MA", "ME", "MI", "MO", "MU") %in% murders$abb))
# 43
population_in_millions <- murders$population/10^6
total_gun_murders <- murders$total
plot(population_in_millions, total_gun_murders)
plot(population_in_millions, log10(total_gun_murders))
plot(log10(population_in_millions), log10(total_gun_murders))
# 44
histogram(murders$population)
# 44
hist(murders$population)
# 45
boxplot(murders$population, by = murders$region)
# 45
boxplot(population ~ region, data = murders)
search()
x <- c(1,2,-3,4)
if(all(x>0)){
print("All Postives")
} else{
print("Not all positives")
}
# 3
nchar = murders[nchar(murders$state) > 8, "abb"]
rm nchar
rm(list = "rm")
rm(list = "nchar")
# 3
new_names = murders[nchar(murders$state) > 8, "abb"]
new_names
# 4
sum_n = function(n){
return(sum(1:n))
}
sum_n(4)
# 4
sum_n = function(n){
return(sum(1:n))
}
sum_n(1000)
# 5
altman_plot = function(x, y){
plot(sum(x, y), y-x)
}
altman_plot(1, 2)
x <- 3
my_func <- function(y){
x <- 5
y+5
}
x
seq(1, n)
1/seq(1, n)
# 7
compute_s_n = function(n){
return(sum((1/seq(1, n))^2))
}
compute_s_n(10)
# 8
s_n = vector("numeric", 25)
s_n\
s_n
# 8
s_n = vector("numeric", 25)
for(i in 1:25){
s_n[i] = compute_s_n(i)
}
s_n
plot(s_n)
# 9
s_n = sapply(1:25, compute_s_n)
s_n
map_dbl(1:25, compute_s_n)
??map_dbl
# 10
library(purrr)
?map_dbl
map_dbl(1:25, compute_s_n)
s_n = map_dbl(1:25, compute_s_n)
# 11
plot(1:25, s_n)
# 12
sum(s_n)
s_n(5)
s_n(25)
# 12
identical(compute_s_n(25) == 25*(25+1)*(2*25+1))/6
# 12
compute_s_n(25) == (25*(25+1)*(2*25+1))/6
compute_s_n(25)
(25*(25+1)*(2*25+1))/6
# 7
compute_s_n = function(n){
return(sum((seq(1, n))^2))
}
compute_s_n(10)
# 8
s_n = vector("numeric", 25)
for(i in 1:25){
s_n[i] = compute_s_n(i)
}
# 9
s_n = sapply(1:25, compute_s_n)
# 10
library(purrr)
s_n = map_dbl(1:25, compute_s_n)
# 11
plot(1:25, s_n)
# 12
compute_s_n(25) == (25*(25+1)*(2*25+1))/6
library(dslabs)
typeof(murders$state)
class(murders$state)
typeof(murders)
class(murders)
murders$pop_rank <- rank(murders$population)
head(murders)
murders$population
murders[1:5,]
```{r}
murders[1:5, 1:2]
murders[1:5, c("state", "abb")]
with(murders, length(state))
with(murders, length(state))
with(murders, length(state) + length(population))
with(murders, length(state) + sum(population))
seq_along(murders)
seq_along(1:4)
seq_along(names(murders))
with(murders, cut(population, c("10^4", "10^5", "10^6", "10^7", "10^8", "10^9", "10^10")))
with(murders, cut(population, c(10^4, 10^5, 10^6, 10^7, 10^8, 10^9, 10^10)))
length(murders$population)
x <- c("b", "s", "t", " ", "2", "6", "0")
seq(1, 10)
seq(1, 9, 2)
1:10
seq_along(x)
typeof(murders$state)
typeof(murders$region)
x <- murders$region
levels(x)
with(murders, cut(population,
c(0, 10^5, 10^6, 10^7, Inf)))
murders$size <- cut(murders$population, c(0, 10^6, 10^7, Inf),
labels = c("small", "medium", "large"))
murders[1:6,c("state", "size")]
factor(x, levels = sort(levels(murders$region)))
sort(levels(murders$region))
x <- relevel(x, ref = "West")
x
str()
str(x)
x <- reorder(murders$region, murders$population, sum)
x
x <- sample(murders$state[c(5,33,44)], 10^7, replace = TRUE)
object.size(x)
object.size(y)
x <- sample(murders$state[c(5,33,44)], 10^7, replace = TRUE)
y <- factor(x)
object.size(x)
object.size(y)
system.time({x <- tolower(x)})
str(x)
system.time({x <- tolower(as.factor(x))})
system.time({x <- tolower(y)})
tolower(y)
tolower(levels(as.factor(y)))
system.time({levels(y) <- tolower(levels(as.factor(y)))})
x[1]
x <- factor(c("3","2","1"), levels = c("3","2","1"))
as.numeric(x)
x[1]
levels(x[1])
table(x[1])
droplevels(x)
x[1]
droplevels(x)
levels(x[1])
droplevels(x[1])
table(x[1])
x[1] <- "4"
x
x <- as.numeric("a")
is.na(x)
is.na("a")
1 + 2 + NA
TRUE & NA
TRUE | NA
#| eval: false
if (NA) print(1) else print(0)
class(0/0)
sqrt(-1)
log(-1)
0/0
class(0/0)
sqrt(-1)
log(-1)
0/0
typeof(1L)
typeof(1)
typeof(1 + 1L)
c("a", 1, 2)
TRUE + FALSE
factor("a") == "a"
identical(factor("a"), "a")
factor("a") == "a"
identical(factor("a"), "a")
typeof(factor("a"))
typeof("a")
class(factor("a"))
x <- factor(c("a","b","b","c"))
as.character(x)
as.numeric(x)
x <- factor(c("a","b","b","c"))
as.character(x)
as.numeric(x)
x <- c("12323", "12,323")
as.numeric(x)
readr::parse_guess(x)
x <- list(name = "John", id = 112, grades = c(95, 87, 92))
x
x$name
x[[1]]
x[["name"]]
#| eval: false
f <- function(x, y, z = 0){ # z = 0 is default
### do calculations with x, y, z to compute object
## return(object)
}
s <- function(n){
return(sum(1:n))
}
s(40)
f <- function(x){
cat("y is", y,"\n")
y <- x
cat("y is", y,"\n")
return(y)
}
f
f(y)
y = 2
f(3)
y
y = f(3)
y
filter
library(dplyr)
filter
n = 100
n(n+1)/2
n*(n+1)/2
n = 1000
n*(n+1)/2
sum(seq(1, n))
log10((sqrt(100)))
log10(sqrt(100))
str(murders)
names(murders)
str(murders)
library(dslabs)
str(murders)
names(murders)
n = 100
sum(seq(1, n))
log10(sqrt(100))
library(dslabs)
str(murders)
names(murders)
library(dslabs)
heights <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)
heights <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)
heights * 2.54 / 100
avg <- mean(heights)
heights - avg
#| eval: false
sd <- sd(heights)
heights
(heights - mean(heights))/sd(heights)
(heights - avg)/sd
heights <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)
rnorm(length(heights), 0, 0.1)
error <- rnorm(length(heights), 0, 0.1)
heights + error
str(murders)
murders$murder_rate = with(murders, total/population)
murders$murder_rate
murders$murder_rate = with(murders, (total/population)*100000)
murders$murder_rate
murders$murder_rate = with(murders, total/population*100000)
murders$murder_rate
x <- 1:10
sqrt(x)
log(x)
2^x
ind <- murders$population < 10^6
ind
murders$state[ind]
ind <- murders$population < 10^6 & murders$region == "West"
ind
murders$state[ind]
with(murders, split(seq_along(region), region))
seq_along(region)
seq_along(murders$region)
region
?split
with(murders, split(seq_along(region), region))
inds = with(murders, split(seq_along(region), region))
class(indx)
class(inds)
murders[[inds$West]]
murders[inds$West,]
ind <- which(murders$state == "California")
ind
ind
murders$state == "California"
murders[ind,]
match(c("New York", "Florida", "Texas"), murders$state)
ind <- match(c("New York", "Florida", "Texas"), murders$state)
ind
c("Boston", "Dakota", "Washington") %in% murders$state
